<?xml version="1.0" encoding="utf-8" ?>
<node>
  <interface name="org.stranger80.SoViAgent">
    <description language="en">
      Defines control interface of SoVi - a programmable SousVide circulation/heating device.
    </description>

    <!-- Device methods -->
    <method name="Shutdown">
      <description language="en">
        Immediately stops the heating and circulation.
      </description>
      <arg name="success" type="b" direction="out">
        <description language="en">
          Result of operation (success = true/false).
        </description>
      </arg>
    </method>

    <method name="ExecuteHeatPattern">
      <description language="en">
        Programs the device to start executing a heat pattern defined via array of 'heat points'.
      </description>
      <arg name="heatPointArray" type="a(di)" direction="in">
        <description language="en">
          Array of heat points.
          A 'heat point' is a single order to set a given temperature to T and maintain it for S seconds.
          Thus it is a struct of 2 integers:
          - Target temperature (degrees Celsius)
          - Temperature sustain period (seconds)
        </description>
      </arg>
      <arg name="success" type="b" direction="out">
        <description language="en">
          Result of operation (success = true/false).
        </description>
      </arg>
    </method>

    <method name="GetStateHistory">
      <description language="en">
        Requests a recorded history of SuVi device states.
        This can be used eg. for charting the heat curves.
      </description>
      <arg name="startTime" type="u" direction="in">
        <description language="en">
          Start of the time range included in the request (Seconds since UNIX Epoch (00:00:00 on January 1, 1970)).
        </description>
      </arg>
      <arg name="success" type="a(udyy)" direction="out">
        <description language="en">
          Array of device state structs. Each struct consists of:
          - Timestamp (Seconds since UNIX Epoch (00:00:00 on January 1, 1970))
          - Temperature (degrees Celsius)
          - Heater state (% of power)
          - Circulation state (% of power)
        </description>
      </arg>
    </method>

    <!-- Device properties -->
    <property name="Version" type="q" access="read">
      <description>Interface version</description>
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>
    
    <property name="Temperature" type="d" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
      <description language="en">
        Current temperature measured by device (degrees Celsius).
      </description>
    </property>

    <property name="Heater" type="i" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
      <description language="en">
        Current state of heater (% of power).
      </description>
    </property>

    <property name="Circulation" type="i" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
      <description language="en">
        Current state of circulation (pump) (% of power).
      </description>
    </property>

    <!-- Signals generated by the device -->
    <signal name="HeatPointCompleted" sessioncast="true">
      <description>
        Signal to notify the controller when a an element of heat pattern completes.
      </description>
      <arg name="isHeatPatternComplete" type="b" direction="out">
        True if whole programmed heat pattern completed, false otherwise.
      </arg>
    </signal>

    <signal name="DeviceErrorOccurred" sessioncast="true">
      <description>
        Signal to notify the controller about a device error.
      </description>
      <arg name="errorDescription" type="(is)" direction="out">
        Error description struct:
        - error code (integer)
        - error description (string)
      </arg>
    </signal>

  </interface>
</node>
