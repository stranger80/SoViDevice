//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace stranger80 { namespace SoViAgent {

// Methods
public ref class SoViAgentShutdownCalledEventArgs sealed
{
public:
    SoViAgentShutdownCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentShutdownResult^ Result
    {
        SoViAgentShutdownResult^ get() { return m_result; }
        void set(_In_ SoViAgentShutdownResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentShutdownResult^>^ GetResultAsync(SoViAgentShutdownCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentShutdownResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentShutdownResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentShutdownResult^ m_result;
};

public ref class SoViAgentExecuteHeatPatternCalledEventArgs sealed
{
public:
    SoViAgentExecuteHeatPatternCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<SoViAgentHeatPointArrayItem^>^ interfaceMemberHeatPointArray);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentExecuteHeatPatternResult^ Result
    {
        SoViAgentExecuteHeatPatternResult^ get() { return m_result; }
        void set(_In_ SoViAgentExecuteHeatPatternResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IVectorView<SoViAgentHeatPointArrayItem^>^ HeatPointArray
    {
        Windows::Foundation::Collections::IVectorView<SoViAgentHeatPointArrayItem^>^ get() { return m_interfaceMemberHeatPointArray; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentExecuteHeatPatternResult^>^ GetResultAsync(SoViAgentExecuteHeatPatternCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentExecuteHeatPatternResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentExecuteHeatPatternResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentExecuteHeatPatternResult^ m_result;
    Windows::Foundation::Collections::IVectorView<SoViAgentHeatPointArrayItem^>^ m_interfaceMemberHeatPointArray;
};

public ref class SoViAgentGetStateHistoryCalledEventArgs sealed
{
public:
    SoViAgentGetStateHistoryCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberStartTime);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentGetStateHistoryResult^ Result
    {
        SoViAgentGetStateHistoryResult^ get() { return m_result; }
        void set(_In_ SoViAgentGetStateHistoryResult^ value) { m_result = value; }
    }

    property uint32 StartTime
    {
        uint32 get() { return m_interfaceMemberStartTime; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentGetStateHistoryResult^>^ GetResultAsync(SoViAgentGetStateHistoryCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentGetStateHistoryResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentGetStateHistoryResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentGetStateHistoryResult^ m_result;
    uint32 m_interfaceMemberStartTime;
};

// Readable Properties
public ref class SoViAgentGetVersionRequestedEventArgs sealed
{
public:
    SoViAgentGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentGetVersionResult^ Result
    {
        SoViAgentGetVersionResult^ get() { return m_result; }
        void set(_In_ SoViAgentGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentGetVersionResult^>^ GetResultAsync(SoViAgentGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentGetVersionResult^ m_result;
};

public ref class SoViAgentGetTemperatureRequestedEventArgs sealed
{
public:
    SoViAgentGetTemperatureRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentGetTemperatureResult^ Result
    {
        SoViAgentGetTemperatureResult^ get() { return m_result; }
        void set(_In_ SoViAgentGetTemperatureResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentGetTemperatureResult^>^ GetResultAsync(SoViAgentGetTemperatureRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentGetTemperatureResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentGetTemperatureResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentGetTemperatureResult^ m_result;
};

public ref class SoViAgentGetHeaterRequestedEventArgs sealed
{
public:
    SoViAgentGetHeaterRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentGetHeaterResult^ Result
    {
        SoViAgentGetHeaterResult^ get() { return m_result; }
        void set(_In_ SoViAgentGetHeaterResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentGetHeaterResult^>^ GetResultAsync(SoViAgentGetHeaterRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentGetHeaterResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentGetHeaterResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentGetHeaterResult^ m_result;
};

public ref class SoViAgentGetCirculationRequestedEventArgs sealed
{
public:
    SoViAgentGetCirculationRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SoViAgentGetCirculationResult^ Result
    {
        SoViAgentGetCirculationResult^ get() { return m_result; }
        void set(_In_ SoViAgentGetCirculationResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SoViAgentGetCirculationResult^>^ GetResultAsync(SoViAgentGetCirculationRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SoViAgentGetCirculationResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SoViAgentGetCirculationResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SoViAgentGetCirculationResult^ m_result;
};

// Writable Properties
} } } 
