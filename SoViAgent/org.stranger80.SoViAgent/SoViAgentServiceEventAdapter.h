//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace stranger80 { namespace SoViAgent {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ISoViAgentService. Instead, SoViAgentServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class SoViAgentServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ISoViAgentService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentShutdownCalledEventArgs^>^ ShutdownCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentShutdownCalledEventArgs^>^ handler) 
        { 
            return _ShutdownCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentShutdownCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ShutdownCalled -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentShutdownCalledEventArgs^ args) 
        { 
            _ShutdownCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentExecuteHeatPatternCalledEventArgs^>^ ExecuteHeatPatternCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentExecuteHeatPatternCalledEventArgs^>^ handler) 
        { 
            return _ExecuteHeatPatternCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentExecuteHeatPatternCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ExecuteHeatPatternCalled -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentExecuteHeatPatternCalledEventArgs^ args) 
        { 
            _ExecuteHeatPatternCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetStateHistoryCalledEventArgs^>^ GetStateHistoryCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetStateHistoryCalledEventArgs^>^ handler) 
        { 
            return _GetStateHistoryCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentGetStateHistoryCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetStateHistoryCalled -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentGetStateHistoryCalledEventArgs^ args) 
        { 
            _GetStateHistoryCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetTemperatureRequestedEventArgs^>^ GetTemperatureRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetTemperatureRequestedEventArgs^>^ handler) 
        { 
            return _GetTemperatureRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentGetTemperatureRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetTemperatureRequested -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentGetTemperatureRequestedEventArgs^ args) 
        { 
            _GetTemperatureRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetHeaterRequestedEventArgs^>^ GetHeaterRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetHeaterRequestedEventArgs^>^ handler) 
        { 
            return _GetHeaterRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentGetHeaterRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetHeaterRequested -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentGetHeaterRequestedEventArgs^ args) 
        { 
            _GetHeaterRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetCirculationRequestedEventArgs^>^ GetCirculationRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SoViAgentServiceEventAdapter^, SoViAgentGetCirculationRequestedEventArgs^>^ handler) 
        { 
            return _GetCirculationRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SoViAgentServiceEventAdapter^>(sender), safe_cast<SoViAgentGetCirculationRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetCirculationRequested -= token; 
        } 
    internal: 
        void raise(SoViAgentServiceEventAdapter^ sender, SoViAgentGetCirculationRequestedEventArgs^ args) 
        { 
            _GetCirculationRequested(sender, args);
        } 
    }

    // Property Write Events
    // ISoViAgentService Implementation
    virtual Windows::Foundation::IAsyncOperation<SoViAgentShutdownResult^>^ ShutdownAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SoViAgentExecuteHeatPatternResult^>^ ExecuteHeatPatternAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<SoViAgentHeatPointArrayItem^>^ interfaceMemberHeatPointArray);
    virtual Windows::Foundation::IAsyncOperation<SoViAgentGetStateHistoryResult^>^ GetStateHistoryAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberStartTime);

    virtual Windows::Foundation::IAsyncOperation<SoViAgentGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SoViAgentGetTemperatureResult^>^ GetTemperatureAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SoViAgentGetHeaterResult^>^ GetHeaterAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SoViAgentGetCirculationResult^>^ GetCirculationAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);


private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ShutdownCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ExecuteHeatPatternCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetStateHistoryCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetTemperatureRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetHeaterRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetCirculationRequested;
};

} } } 
